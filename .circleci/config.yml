# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.2

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            mkdir xunit
            nosetests --with-coverage --cover-html --cover-html-dir code-coverage-results --cover-erase --cover-package=app --verbose --with-xunit --xunit-file xunit/test-results.xml

      - store_artifacts:
          path: code-coverage-results
          destination: test-results/code-coverage-results

      - store_artifacts:
          path: xunit/test-results.xml
          destination: test-results/test-results.xml

      - store_test_results:
          path: xunit

      - run: bash .circleci/setup-heroku.sh

      - add_ssh_keys:
          fingerprints:
            - "40:73:e4:e8:ef:e9:f2:f7:e3:3d:3e:eb:88:5d:be:14"

      - deploy:
          name: Deploy Master to Heroku
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              git push heroku master
              heroku run python manage.py deploy
              heroku restart
            fi

      - run:
          name: Tag GitHub after successful deployment
          command: |
            git tag releases/v$CIRCLE_BUILD_NUM
